version: 2.1

# orbs:
#   docker-publish: circleci/docker@1.7.0

commands:
  run_tests:
    parameters:
      mpl:
        description: "Enable plot comparison tests"
        type: boolean
        default: true

    steps:
      - run:
          name: Run tests
          command: |
            [[ "<<parameters.mpl>>" == "true" ]] && export MPL="--mpl"

            source activate opendrift
            pytest --circleci-parallelize --junitxml=test-results/junit.xml --cov=opendrift --ignore=tests/benchmarks --ignore=tests/wps --run-slow $MPL --mpl-results-path=test-results/mpl_images --durations=50 --benchmark-disable -v --log-cli-level=debug

      - store_test_results:
          path: test-results

      - store_artifacts:
          path: test-results

      # - run:
      #     name: Upload to coveralls
      #     command: |
      #       source activate opendrift
      #       if [ -v COVERALLS_UPLOAD ]; then
      #         COVERALLS_REPO_TOKEN=nEzcGcepz6KeM8OpvG2WoxbGjMGwivyAQ coveralls
      #       fi


  install_conda_environment:
    steps:
      - run:
          name: Checksum environment
          command: |
            echo "python=${PYTHON_VERSION}" > envconfig
            cat envconfig

      - restore_cache:
          key: v20-deps1-{{ checksum "environment.yml" }}-{{ checksum "envconfig" }}

      - run:
          name: Install requirements
          no_output_timeout: 30m
          command: |
            if [ ! -e /opt/conda/envs/opendrift ]; then
              if [ -v PYTHON_VERSION ]; then
                echo "Pinning python: ${PYTHON_VERSION}."
                # pin python
                mamba create -c conda-forge -n opendrift -q -y "python=${PYTHON_VERSION}"

                echo "python ${PYTHON_VERSION}.*" > /opt/conda/envs/opendrift/conda-meta/pinned
                cat /opt/conda/envs/opendrift/conda-meta/pinned

                mamba env update -n opendrift -q -f environment.yml
              else
                mamba env create -q --file environment.yml
              fi

              source activate opendrift

              pip install pyyaml coveralls pytest-circleci-parallelized pytest-cov
            fi

      - save_cache:
          key: v20-deps1-{{ checksum "environment.yml" }}-{{ checksum "envconfig" }}
          paths:
            - "/opt/conda/envs"
      - run:
          name: List environment
          command: |
            source activate opendrift
            mamba list

  install_cartopy_shapes:
    steps:
      - restore_cache:
          key: v1-cartopy-shapes

      - run:
          name: Download cartopy shapes
          command: |
            source activate opendrift
            python -c "import cartopy; list(map(cartopy.io.shapereader.gshhs, ('c', 'l', 'i', 'h', 'f')))"
            python -c "import cartopy; cartopy.io.shapereader.natural_earth(resolution='110m', category='cultural', name='admin_0_countries')"

      - save_cache:
          key: v1-cartopy-shapes
          paths:
            - "/root/.local/share/cartopy"


test-template: &test-template
  docker:
    - image: condaforge/mambaforge
  resource_class: medium+
  steps:
    - checkout

    - install_conda_environment

    - install_cartopy_shapes

    - run_tests:
        mpl: true

jobs:
  build_package:
    docker:
      - image: condaforge/mambaforge
    environment:
      - PYTHON_VERSION=3.9

    steps:
      - checkout
      - install_conda_environment

      - run:
          name: Install poetry
          command: |
            source activate opendrift
            pip install poetry

      - run:
          name: Build package
          command: |
            source activate opendrift
            poetry build -vv

      - persist_to_workspace:
          root: dist
          paths:
            - '*.whl'
            - '*.tar.gz'

  publish_package:
    docker:
      - image: condaforge/mambaforge
    environment:
      - PYTHON_VERSION=3.9

    steps:
      - checkout
      - install_conda_environment

      - run:
          name: Install poetry
          command: |
            source activate opendrift
            pip install poetry

      - attach_workspace:
          at: dist

      - run:
          name: Publish packages
          command: |
            if [[ "${CIRCLE_BRANCH}" == "master" ]]; then
              source activate opendrift
              poetry publish -vv --skip-existing -u __token__ -p ${PYPI_TOKEN}
            fi

  python_312:
    <<: *test-template
    parallelism: 5
    environment:
      - PYTHON_VERSION=3.12

  python_311:
    <<: *test-template
    parallelism: 5
    environment:
      - PYTHON_VERSION=3.11

  python_310:
    <<: *test-template
    parallelism: 5
    environment:
      - COVERALLS_UPLOAD=1
      - PYTHON_VERSION=3.10

  python_39:
    <<: *test-template
    parallelism: 5
    environment:
      - PYTHON_VERSION=3.9

  docs-build-examples:
    docker:
      - image: condaforge/mambaforge
    parallelism: 20
    steps:
      - checkout
      - run:
          name: Update packages
          command: DEBIAN_FRONTEND=noninteractive apt-get -y update
      - run:
          name: Install packages
          command: DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential jq curl

      - run:
          name: Get PR title
          command: |
            if [[ -v CIRCLE_PULL_REQUEST ]]; then
              PR_NUMBER=$(echo "$CIRCLE_PULL_REQUEST" | sed "s/.*\/pull\///")
              GITHUB_PR_TITLE=$(curl "https://api.github.com/repos/OpenDrift/OpenDrift/pulls/${PR_NUMBER}" | jq -e '.title')
              echo "export GITHUB_PR_NO=${PR_NUMBER}" >> ${BASH_ENV}
              echo "export GITHUB_PR_TITLE=${GITHUB_PR_TITLE}" >> ${BASH_ENV}
              echo "PR: ${GITHUB_PR_TITLE}"
            fi

      - install_conda_environment

      - install_cartopy_shapes

      - run:
          name: Install sphinx and friends
          command: |
            source activate opendrift
            mamba install -c conda-forge sphinx sphinx-autoapi sphinx-gallery>=0.7.0
            pip install sphinx-rtd-theme

      - run:
          name: Checksum gallery
          command: cd docs && make checksum-gallery | tee /tmp/gallery-checksum.txt

      - run:
          name: Checksum plots
          command: cd docs && make checksum-plots | tee /tmp/plots-checksum.txt

      # saved in docs-build
      - restore_cache:
          key: gallery-v9-{{ checksum "/tmp/gallery-checksum.txt" }}

      # saved in docs-build
      - restore_cache:
          key: plots-v4-{{ checksum "/tmp/plots-checksum.txt" }}

      - run:
          name: Check if examples should be re-built
          command: |
            if git log --oneline --pretty=format:%s "master^1..${CIRCLE_SHA1}" | grep '\[run-ex\]' ; then
              BUILD_EXAMPLES=1
            else
              BUILD_EXAMPLES=0
            fi
            echo "export BUILD_EXAMPLES=${BUILD_EXAMPLES}" >> ${BASH_ENV}
            echo "Build examples: ${BUILD_EXAMPLES}"

      - run:
          name: Clean cache if docs should be re-built
          command: |
            if [[ "${GITHUB_PR_TITLE}" == *"[run-ex]"* || "${BUILD_EXAMPLES}" -eq 1 ]]; then
              echo "Clearing out examples.."
              source activate opendrift
              cd docs/
              make clean
            fi

      - run:
          name: Wake-up Thredds-servers
          command: |
              source activate opendrift
              python .circleci/wake-up-thredds.py

      - run:
          name: Build docs
          command: |
            source activate opendrift
            cd docs/
            make sharded-gallery SHARDS=${CIRCLE_NODE_TOTAL} SHARD=${CIRCLE_NODE_INDEX}
            ls -R source
          no_output_timeout: 60m

      - store_test_results:
          path: docs/test-results

      - store_artifacts:
          path: docs/test-results

      - persist_to_workspace:
          root: docs/source
          paths: gallery

  docs-build:
    docker:
      - image: condaforge/mambaforge
    steps:
      - checkout

      - attach_workspace:
          at: docs/source

      - run:
          name: Update packages
          command: DEBIAN_FRONTEND=noninteractive apt-get -y update
      - run:
          name: Install packages
          command: DEBIAN_FRONTEND=noninteractive apt-get install -y build-essential gfortran libgeos-dev gdal-bin imagemagick jq curl

      - run:
          name: Get PR title
          command: |
            if [[ -v CIRCLE_PULL_REQUEST ]]; then
              PR_NUMBER=$(echo "$CIRCLE_PULL_REQUEST" | sed "s/.*\/pull\///")
              GITHUB_PR_TITLE=$(curl "https://api.github.com/repos/OpenDrift/OpenDrift/pulls/${PR_NUMBER}" | jq -e '.title')
              echo "export GITHUB_PR_NO=${PR_NUMBER}" >> ${BASH_ENV}
              echo "export GITHUB_PR_TITLE=${GITHUB_PR_TITLE}" >> ${BASH_ENV}
              echo "PR: ${GITHUB_PR_TITLE}"
            fi

      - run:
          name: Check if examples should be built
          command: |
            if git log --oneline --pretty=format:%s "master..${CIRCLE_SHA1}" | grep '\[run-ex\]' ; then
              BUILD_EXAMPLES=1
            else
              BUILD_EXAMPLES=0
            fi
            echo "export BUILD_EXAMPLES=${BUILD_EXAMPLES}" >> ${BASH_ENV}
            echo "Build examples: ${BUILD_EXAMPLES}"

      - restore_cache:
          key: v8-docs-deps1-{{ checksum "environment.yml" }}

      - install_conda_environment

      - install_cartopy_shapes

      - run:
          name: Install sphinx and friends
          command: |
            source activate opendrift
            mamba install -c conda-forge sphinx sphinx-autoapi sphinx-gallery>=0.7.0
            pip install sphinx-rtd-theme

      - save_cache:
          key: v8-docs-deps1-{{ checksum "environment.yml" }}
          paths:
            - "/opt/conda/envs"

      # the plot and gallery cache is not perfect, because it will only detect plot directive changes
      # in the docs/source and not inline plot directives in the opendrift module. these
      # should be re-generated anyway though, but won't be cached until the docs change.

      - run:
          name: Checksum gallery
          command: cd docs && make checksum-gallery | tee /tmp/gallery-checksum.txt

      - run:
          name: Checksum plots
          command: cd docs && make checksum-plots | tee /tmp/plots-checksum.txt

      - run:
          name: Wake-up Thredds-servers
          command: |
              source activate opendrift
              python .circleci/wake-up-thredds.py

      - run:
          name: Build docs
          command: |
            source activate opendrift
            cd docs/
            ls -R source/gallery
            make html
          no_output_timeout: 40m

      - save_cache:
          key: gallery-v9-{{ checksum "/tmp/gallery-checksum.txt" }}
          paths:
            - "docs/source/gallery"

      - save_cache:
          key: plots-v4-{{ checksum "/tmp/plots-checksum.txt" }}
          paths:
            - "docs/build/plot_directive"

      - persist_to_workspace:
          root: docs/build
          paths: html

  docs-deploy:
    docker:
      - image: node:10
    steps:
      - checkout
      - attach_workspace:
          at: docs/build
      - run:
          name: Disable jekyll builds
          command: touch docs/build/html/.nojekyll
      - run:
          name: Install and configure dependencies
          command: |
            npm install -g --silent gh-pages@2.0.1
            git config user.email "ci-build@opendrift"
            git config user.name "ci-build"

      - add_ssh_keys:
          fingerprints:
            - "c0:95:6e:db:93:97:28:a7:45:f4:d7:30:e3:fe:a6:8f"
      - run:
          name: Deploy docs to gh-pages branch
          command: gh-pages --dotfiles --message "[skip ci] Updates" --dist docs/build/html --repo git@github.com:OpenDrift/opendrift.github.io.git --branch master

workflows:
  version: 2.1

  test-and-package:
    jobs:
      - python_312
      - python_311
      - python_310
      - python_39
      - build_package
      - publish_package:
          requires:
            - build_package
            - python_39
          filters:
            tags:
              only: /^v.*/
            branches:
              only: master

  docs:
    jobs:
      - docs-build-examples

      - docs-build:
          requires:
            - docs-build-examples

      - docs-deploy:
          requires:
            - docs-build
          filters:
            branches:
             only: master
